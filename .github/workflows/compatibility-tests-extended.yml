name: Compatibility Tests (Extended Runtimes)

on:
  workflow_dispatch:
    inputs:
      run_baseline:
        description: 'Run baseline lane (Node 20 + curated oldest stack)'
        required: false
        default: 'true'
      baseline_runtime:
        description: 'Baseline runtime id'
        required: false
        default: 'node20'
      baseline_react:
        description: 'Baseline React version'
        required: false
        default: '18.3.1'
      baseline_typescript:
        description: 'Baseline TypeScript version'
        required: false
        default: '5.2.2'
      baseline_eslint:
        description: 'Baseline ESLint version'
        required: false
        default: '8.57.0'
      baseline_prettier:
        description: 'Baseline Prettier version'
        required: false
        default: '3.3.3'
      run_latest:
        description: 'Run latest lane (Node 24 + latest stack)'
        required: false
        default: 'true'
      latest_runtime:
        description: 'Latest runtime id'
        required: false
        default: 'node24'
      latest_react:
        description: 'Latest React version'
        required: false
        default: '19.1.1'
      latest_typescript:
        description: 'Latest TypeScript version'
        required: false
        default: '5.9.3'
      latest_eslint:
        description: 'Latest ESLint version'
        required: false
        default: '9.13.0'
      latest_prettier:
        description: 'Latest Prettier version'
        required: false
        default: '3.6.2'
      quick:
        description: 'Set to true to add --quick to each run'
        required: false
        default: 'false'

jobs:
  extended-matrix:
    name: Extended runtime compatibility matrix
    runs-on: ubuntu-latest
    timeout-minutes: 120
    environment:
      name: runtime-extended
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    permissions:
      contents: read
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '9'

      - name: Verify pnpm
        run: pnpm --version

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run baseline compatibility smoke
        id: run-baseline
        if: ${{ (github.event.inputs.run_baseline || 'true') == 'true' }}
        env:
          RUNTIME: ${{ github.event.inputs.baseline_runtime || 'node20' }}
          REACT: ${{ github.event.inputs.baseline_react || '18.3.1' }}
          TYPESCRIPT: ${{ github.event.inputs.baseline_typescript || '5.2.2' }}
          ESLINT: ${{ github.event.inputs.baseline_eslint || '8.57.0' }}
          PRETTIER: ${{ github.event.inputs.baseline_prettier || '3.3.3' }}
          QUICK: ${{ github.event.inputs.quick || 'false' }}
        run: |
          set -eo pipefail
          args=("--runtime" "$RUNTIME" "--linter" "eslint-prettier" "--react" "$REACT" "--typescript" "$TYPESCRIPT" "--eslint" "$ESLINT" "--prettier" "$PRETTIER")
          if [ "$QUICK" = "true" ]; then
            args+=("--quick")
          fi
          echo "[baseline] pnpm compat:matrix -- ${args[*]}" >&2
          pnpm run compat:matrix -- "${args[@]}"

      - name: Capture baseline summary path
        id: baseline-summary
        if: ${{ (github.event.inputs.run_baseline || 'true') == 'true' }}
        run: |
          node <<'NODE'
          import fs from 'node:fs'
          import path from 'node:path'

          const outputFile = process.env.GITHUB_OUTPUT
          const suiteDir = path.join(process.cwd(), 'version-compatibility-tests')
          const latestPtr = path.join(suiteDir, 'MATRIX_LATEST.json')
          let summaryPath = ''
          let summaryDir = ''
          if (fs.existsSync(latestPtr)) {
            try {
              const data = JSON.parse(fs.readFileSync(latestPtr, 'utf8'))
              summaryPath = data.summaryPath || ''
              summaryDir = summaryPath ? path.dirname(summaryPath) : ''
            } catch (error) {
              console.warn('[baseline] Failed to read MATRIX_LATEST.json:', error.message)
            }
          }
          if (!summaryPath) {
            console.warn('[baseline] No summary path detected')
          }
          const lines = [
            `summary-path=${summaryPath}`,
            `summary-dir=${summaryDir}`
          ]
          console.log(lines.join('\n'))
          if (outputFile) {
            fs.appendFileSync(outputFile, lines.join('\n') + '\n')
          }
NODE

      - name: Run latest compatibility smoke
        id: run-latest
        if: ${{ (github.event.inputs.run_latest || 'true') == 'true' }}
        env:
          RUNTIME: ${{ github.event.inputs.latest_runtime || 'node24' }}
          REACT: ${{ github.event.inputs.latest_react || '19.1.1' }}
          TYPESCRIPT: ${{ github.event.inputs.latest_typescript || '5.9.3' }}
          ESLINT: ${{ github.event.inputs.latest_eslint || '9.13.0' }}
          PRETTIER: ${{ github.event.inputs.latest_prettier || '3.6.2' }}
          QUICK: ${{ github.event.inputs.quick || 'false' }}
        run: |
          set -eo pipefail
          args=("--runtime" "$RUNTIME" "--linter" "eslint-prettier" "--react" "$REACT" "--typescript" "$TYPESCRIPT" "--eslint" "$ESLINT" "--prettier" "$PRETTIER")
          if [ "$QUICK" = "true" ]; then
            args+=("--quick")
          fi
          echo "[latest] pnpm compat:matrix -- ${args[*]}" >&2
          pnpm run compat:matrix -- "${args[@]}"

      - name: Capture latest summary path
        id: latest-summary
        if: ${{ (github.event.inputs.run_latest || 'true') == 'true' }}
        run: |
          node <<'NODE'
          import fs from 'node:fs'
          import path from 'node:path'

          const outputFile = process.env.GITHUB_OUTPUT
          const suiteDir = path.join(process.cwd(), 'version-compatibility-tests')
          const latestPtr = path.join(suiteDir, 'MATRIX_LATEST.json')
          let summaryPath = ''
          let summaryDir = ''
          if (fs.existsSync(latestPtr)) {
            try {
              const data = JSON.parse(fs.readFileSync(latestPtr, 'utf8'))
              summaryPath = data.summaryPath || ''
              summaryDir = summaryPath ? path.dirname(summaryPath) : ''
            } catch (error) {
              console.warn('[latest] Failed to read MATRIX_LATEST.json:', error.message)
            }
          }
          if (!summaryPath) {
            console.warn('[latest] No summary path detected')
          }
          const lines = [
            `summary-path=${summaryPath}`,
            `summary-dir=${summaryDir}`
          ]
          console.log(lines.join('\n'))
          if (outputFile) {
            fs.appendFileSync(outputFile, lines.join('\n') + '\n')
          }
NODE

      - name: Generate compatibility summary
        if: ${{ (github.event.inputs.run_baseline || 'true') == 'true' || (github.event.inputs.run_latest || 'true') == 'true' }}
        run: pnpm run compat:matrix:summary

      - name: Upload baseline artifacts
        if: ${{ steps.baseline-summary.outputs.summary-dir != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-baseline-logs
          path: ${{ steps.baseline-summary.outputs.summary-dir }}

      - name: Upload latest artifacts
        if: ${{ steps.latest-summary.outputs.summary-dir != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-latest-logs
          path: |
            ${{ steps.latest-summary.outputs.summary-dir }}
            version-compatibility-tests/MATRIX_SUMMARY.md
            version-compatibility-tests/MATRIX_LATEST.json
