
> @pablo-lion/xterm-react@1.2.0 biome:check /Users/pablo/LocalDocs/repo/PabloLION/xterm-react
> biome check . "--" "--max-diagnostics=5"

Skipped 5 suggested fixes.
If you wish to apply the suggested (unsafe) fixes, use the command biome check --fix --unsafe

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 8114.
Checked 24 files in 643ms. No fixes applied.
Found 130 errors.
 ELIFECYCLE  Command failed with exit code 1.

--max-diagnostics=5 internalError/io  INTERNAL  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × No such file or directory (os error 2)
  
  ! This diagnostic was derived from an internal Biome error. Potential bug, please report it if necessary.
  

./package.json format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
     6  6 │     "types": "dist/index.d.ts",
     7  7 │     "type": "module",
     8    │ - ··"files":·[
     9    │ - ····"dist"
    10    │ - ··],
        8 │ + ··"files":·["dist"],
    11  9 │     "scripts": {
    12 10 │       "dev": "vite",
    ····· │ 
    79 77 │     },
    80 78 │     "sideEffects": false
    81    │ - }
       79 │ + }
       80 │ + 
  

./biome.json format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    16 16 │       }
    17 17 │     }
    18    │ - }
       18 │ + }
       19 │ + 
  

./version-compatibility-tests/devtools/eslint-compatibility-report.json format ━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    84 84 │       }
    85 85 │     ]
    86    │ - }
       86 │ + }
       87 │ + 
  

./vite.config.mjs:2:18 lint/style/useNodejsImportProtocol  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × A Node.js builtin module should be imported with the node: protocol.
  
    1 │ import { defineConfig } from "vite";
  > 2 │ import path from "path";
      │                  ^^^^^^
    3 │ import reactRefresh from "@vitejs/plugin-react-refresh";
    4 │ 
  
  i Using the node: protocol is more explicit and signals that the imported module belongs to Node.js.
  
  i Unsafe fix: Add the node: protocol.
  
     1  1 │   import { defineConfig } from "vite";
     2    │ - import·path·from·"path";
        2 │ + import·path·from·"node:path";
     3  3 │   import reactRefresh from "@vitejs/plugin-react-refresh";
     4  4 │   
  

./vite.config.mjs organizeImports ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Import statements could be sorted:
  
     1    │ - import·{·defineConfig·}·from·"vite";
     2    │ - import·path·from·"path";
        1 │ + import·path·from·"path";
     3  2 │   import reactRefresh from "@vitejs/plugin-react-refresh";
        3 │ + import·{·defineConfig·}·from·"vite";
     4  4 │   
     5  5 │   export default defineConfig({
  

./eslint.config.mjs organizeImports ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Import statements could be sorted:
  
     1    │ - import·eslintConfigPrettier·from·"eslint-config-prettier";
     2    │ - import·eslintPluginPrettierRecommended·from·"eslint-plugin-prettier/recommended";
     3    │ - import·jsLint·from·"@eslint/js";
        1 │ + import·jsLint·from·"@eslint/js";
        2 │ + import·eslintConfigPrettier·from·"eslint-config-prettier";
        3 │ + import·eslintPluginPrettierRecommended·from·"eslint-plugin-prettier/recommended";
     4  4 │   import tsLint from "typescript-eslint";
     5  5 │   
  

./dist/XTerm.d.ts:3:8 lint/style/useImportType  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × All these imports are only used as types.
  
     1 │ import "@xterm/xterm/css/xterm.css";
     2 │ import * as React from "react";
   > 3 │ import {
       │        ^
   > 4 │   type IBufferRange,
        ...
   > 9 │   Terminal,
  > 10 │ } from "@xterm/xterm";
       │ ^^^^^^^^^^^^^^^^^^^^^
    11 │ export type IEventListener<T, U = void> = (arg1: T, arg2: U) => void;
    12 │ export interface XTermProps {
  
  i Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  i Safe fix: Use import type.
  
      1   1 │   import "@xterm/xterm/css/xterm.css";
      2   2 │   import * as React from "react";
      3     │ - import·{
      4     │ - ··type·IBufferRange,
      5     │ - ··type·ILinkProvider,
      6     │ - ··type·ITerminalAddon,
      7     │ - ··type·ITerminalInitOnlyOptions,
      8     │ - ··type·ITerminalOptions,
          3 │ + import·type·{
          4 │ + ··IBufferRange,
          5 │ + ··ILinkProvider,
          6 │ + ··ITerminalAddon,
          7 │ + ··ITerminalInitOnlyOptions,
          8 │ + ··ITerminalOptions,
      9   9 │     Terminal,
     10  10 │   } from "@xterm/xterm";
  

./dist/XTerm.d.ts organizeImports ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Import statements could be sorted:
  
      1   1 │   import "@xterm/xterm/css/xterm.css";
      2     │ - import·*·as·React·from·"react";
      3     │ - import·{
          2 │ + import·{
      4   3 │     type IBufferRange,
      5   4 │     type ILinkProvider,
    ······· │ 
      9   8 │     Terminal,
     10   9 │   } from "@xterm/xterm";
         10 │ + import·*·as·React·from·"react";
     11  11 │   export type IEventListener<T, U = void> = (arg1: T, arg2: U) => void;
     12  12 │   export interface XTermProps {
  

./dist/XTerm.js:46:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    44 │     this.terminal.onTitleChange(this.onTitleChange);
    45 │     // Load addons if the prop exists.
  > 46 │     this.props.addons?.forEach((addon) => {
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 47 │       this.terminal.loadAddon(addon);
  > 48 │     });
       │     ^^
    49 │     // Add Custom Key Event Handler
    50 │     if (this.props.customKeyEventHandler) {
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

./dist/XTerm.js organizeImports ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Import statements could be sorted:
  
      1   1 │   import { jsx as _jsx } from "react/jsx-runtime";
      2   2 │   import "@xterm/xterm/css/xterm.css";
      3     │ - import·*·as·React·from·"react";
      4   3 │   // We are using these as types.
      5   4 │   import { Terminal } from "@xterm/xterm";
          5 │ + import·*·as·React·from·"react";
      6   6 │   export class XTerm extends React.Component {
      7   7 │     /**
  

./src/XTerm.tsx:291:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    290 │     // Load addons if the prop exists.
  > 291 │     this.props.addons?.forEach((addon) => {
        │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 292 │       this.terminal.loadAddon(addon);
  > 293 │     });
        │     ^^
    294 │ 
    295 │     // Add Custom Key Event Handler
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

./version-compatibility-tests/core/react-versions-test.js:67:43 lint/style/useTemplate  FIXABLE  ━━━━━━━━━━

  × Template literals are preferred over string concatenation.
  
    65 │       const stdout = err.stdout ? err.stdout.toString() : "";
    66 │       const stderr = err.stderr ? err.stderr.toString() : "";
  > 67 │       const combined = stdout + (stderr ? "\n" + stderr : "");
       │                                           ^^^^^^^^^^^^^
    68 │       if (logPath) {
    69 │         fs.mkdirSync(path.dirname(logPath), { recursive: true });
  
  i Unsafe fix: Use a template literal.
  
     65  65 │         const stdout = err.stdout ? err.stdout.toString() : "";
     66  66 │         const stderr = err.stderr ? err.stderr.toString() : "";
     67     │ - ······const·combined·=·stdout·+·(stderr·?·"\n"·+·stderr·:·"");
         67 │ + ······const·combined·=·stdout·+·(stderr·?·`\n${stderr}`·:·"");
     68  68 │         if (logPath) {
     69  69 │           fs.mkdirSync(path.dirname(logPath), { recursive: true });
  

./version-compatibility-tests/core/react-versions-test.js:147:19 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    146 │       // Test TypeScript compilation
  > 147 │       console.log(`   Testing TypeScript compilation...`);
        │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    148 │       this.execWithLog(
    149 │         "pnpm run build",
  
  i Unsafe fix: Replace with string literal
  
    145 145 │   
    146 146 │         // Test TypeScript compilation
    147     │ - ······console.log(`···Testing·TypeScript·compilation...`);
        147 │ + ······console.log("···Testing·TypeScript·compilation...");
    148 148 │         this.execWithLog(
    149 149 │           "pnpm run build",
  

./version-compatibility-tests/core/react-versions-test.js:155:19 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    154 │       // Test if e2e example still works
  > 155 │       console.log(`   Testing e2e compatibility...`);
        │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    156 │       const buildResult = await this.testE2EBuild();
    157 │ 
  
  i Unsafe fix: Replace with string literal
  
    153 153 │   
    154 154 │         // Test if e2e example still works
    155     │ - ······console.log(`···Testing·e2e·compatibility...`);
        155 │ + ······console.log("···Testing·e2e·compatibility...");
    156 156 │         const buildResult = await this.testE2EBuild();
    157 157 │   
  

./version-compatibility-tests/core/react-versions-test.js:207:42 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    205 │           ? "pnpm install"
    206 │           : "pnpm install --silent";
  > 207 │         this.execWithLog(restoreCmd, {}, `restore-install.log`);
        │                                          ^^^^^^^^^^^^^^^^^^^^^
    208 │         console.log("✅ Original dependencies restored");
    209 │       } catch (error) {
  
  i Unsafe fix: Replace with string literal
  
    205 205 │             ? "pnpm install"
    206 206 │             : "pnpm install --silent";
    207     │ - ········this.execWithLog(restoreCmd,·{},·`restore-install.log`);
        207 │ + ········this.execWithLog(restoreCmd,·{},·"restore-install.log");
    208 208 │           console.log("✅ Original dependencies restored");
    209 209 │         } catch (error) {
  

./version-compatibility-tests/core/react-versions-test.js:233:20 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    232 │     // Generate markdown report
  > 233 │     let markdown = `# React Version Compatibility Report\n\n`;
        │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    234 │     markdown += `Generated: ${report.testDate}\n\n`;
    235 │     markdown += `## Summary\n\n`;
  
  i Unsafe fix: Replace with string literal
  
    231 231 │   
    232 232 │       // Generate markdown report
    233     │ - ····let·markdown·=·`#·React·Version·Compatibility·Report\n\n`;
        233 │ + ····let·markdown·=·"#·React·Version·Compatibility·Report\n\n";
    234 234 │       markdown += `Generated: ${report.testDate}\n\n`;
    235 235 │       markdown += `## Summary\n\n`;
  

./version-compatibility-tests/core/react-versions-test.js:235:17 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    233 │     let markdown = `# React Version Compatibility Report\n\n`;
    234 │     markdown += `Generated: ${report.testDate}\n\n`;
  > 235 │     markdown += `## Summary\n\n`;
        │                 ^^^^^^^^^^^^^^^^
    236 │     markdown += `- Total versions tested: ${report.summary.total}\n`;
    237 │     markdown += `- ✅ Compatible: ${report.summary.passed}\n`;
  
  i Unsafe fix: Replace with string literal
  
    233 233 │       let markdown = `# React Version Compatibility Report\n\n`;
    234 234 │       markdown += `Generated: ${report.testDate}\n\n`;
    235     │ - ····markdown·+=·`##·Summary\n\n`;
        235 │ + ····markdown·+=·"##·Summary\n\n";
    236 236 │       markdown += `- Total versions tested: ${report.summary.total}\n`;
    237 237 │       markdown += `- ✅ Compatible: ${report.summary.passed}\n`;
  

./version-compatibility-tests/core/react-versions-test.js:239:17 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    237 │     markdown += `- ✅ Compatible: ${report.summary.passed}\n`;
    238 │     markdown += `- ❌ Issues found: ${report.summary.failed}\n\n`;
  > 239 │     markdown += `## Detailed Results\n\n`;
        │                 ^^^^^^^^^^^^^^^^^^^^^^^^^
    240 │ 
    241 │     this.results.forEach((result) => {
  
  i Unsafe fix: Replace with string literal
  
    237 237 │       markdown += `- ✅ Compatible: ${report.summary.passed}\n`;
    238 238 │       markdown += `- ❌ Issues found: ${report.summary.failed}\n\n`;
    239     │ - ····markdown·+=·`##·Detailed·Results\n\n`;
        239 │ + ····markdown·+=·"##·Detailed·Results\n\n";
    240 240 │   
    241 241 │       this.results.forEach((result) => {
  

./version-compatibility-tests/core/react-versions-test.js:241:5 lint/complexity/noForEach ━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    239 │     markdown += `## Detailed Results\n\n`;
    240 │ 
  > 241 │     this.results.forEach((result) => {
        │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 242 │       markdown += `### ${result.name}\n\n`;
         ...
  > 259 │       markdown += `- **Tested**: ${result.timestamp}\n\n`;
  > 260 │     });
        │     ^^
    261 │ 
    262 │     const markdownPath = path.join(__dirname, "react-compatibility-report.md");
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

check ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while running checks.
  

