
> @pablo-lion/xterm-react@1.2.0 biome:check /Users/pablo/LocalDocs/repo/PabloLION/xterm-react
> biome check . "--" "--max-diagnostics=5"

Skipped 5 suggested fixes.
If you wish to apply the suggested (unsafe) fixes, use the command biome check --fix --unsafe

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 8114.
Checked 24 files in 618ms. No fixes applied.
Found 130 errors.
 ELIFECYCLE  Command failed with exit code 1.

--max-diagnostics=5 internalError/io  INTERNAL  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × No such file or directory (os error 2)
  
  ! This diagnostic was derived from an internal Biome error. Potential bug, please report it if necessary.
  

./package.json format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
     6  6 │     "types": "dist/index.d.ts",
     7  7 │     "type": "module",
     8    │ - ··"files":·[
     9    │ - ····"dist"
    10    │ - ··],
        8 │ + ··"files":·["dist"],
    11  9 │     "scripts": {
    12 10 │       "dev": "vite",
    ····· │ 
    79 77 │     },
    80 78 │     "sideEffects": false
    81    │ - }
       79 │ + }
       80 │ + 
  

./biome.json format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    16 16 │       }
    17 17 │     }
    18    │ - }
       18 │ + }
       19 │ + 
  

./e2e/xterm-react.jsx format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    9 │ ······"Hello·from·\x1B[1;3;31mxterm-react\x1B[0m",
      │                                                  +

./eslint.config.mjs organizeImports ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Import statements could be sorted:
  
     1    │ - import·eslintConfigPrettier·from·"eslint-config-prettier";
     2    │ - import·eslintPluginPrettierRecommended·from·"eslint-plugin-prettier/recommended";
     3    │ - import·jsLint·from·"@eslint/js";
        1 │ + import·jsLint·from·"@eslint/js";
        2 │ + import·eslintConfigPrettier·from·"eslint-config-prettier";
        3 │ + import·eslintPluginPrettierRecommended·from·"eslint-plugin-prettier/recommended";
     4  4 │   import tsLint from "typescript-eslint";
     5  5 │   
  

./dist/XTerm.js:46:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    44 │     this.terminal.onTitleChange(this.onTitleChange);
    45 │     // Load addons if the prop exists.
  > 46 │     this.props.addons?.forEach((addon) => {
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 47 │       this.terminal.loadAddon(addon);
  > 48 │     });
       │     ^^
    49 │     // Add Custom Key Event Handler
    50 │     if (this.props.customKeyEventHandler) {
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

./dist/XTerm.d.ts:3:8 lint/style/useImportType  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × All these imports are only used as types.
  
     1 │ import "@xterm/xterm/css/xterm.css";
     2 │ import * as React from "react";
   > 3 │ import {
       │        ^
   > 4 │   type IBufferRange,
        ...
   > 9 │   Terminal,
  > 10 │ } from "@xterm/xterm";
       │ ^^^^^^^^^^^^^^^^^^^^^
    11 │ export type IEventListener<T, U = void> = (arg1: T, arg2: U) => void;
    12 │ export interface XTermProps {
  
  i Importing the types with import type ensures that they are removed by the compilers and avoids loading unnecessary modules.
  
  i Safe fix: Use import type.
  
      1   1 │   import "@xterm/xterm/css/xterm.css";
      2   2 │   import * as React from "react";
      3     │ - import·{
      4     │ - ··type·IBufferRange,
      5     │ - ··type·ILinkProvider,
      6     │ - ··type·ITerminalAddon,
      7     │ - ··type·ITerminalInitOnlyOptions,
      8     │ - ··type·ITerminalOptions,
          3 │ + import·type·{
          4 │ + ··IBufferRange,
          5 │ + ··ILinkProvider,
          6 │ + ··ITerminalAddon,
          7 │ + ··ITerminalInitOnlyOptions,
          8 │ + ··ITerminalOptions,
      9   9 │     Terminal,
     10  10 │   } from "@xterm/xterm";
  

./dist/XTerm.js organizeImports ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Import statements could be sorted:
  
      1   1 │   import { jsx as _jsx } from "react/jsx-runtime";
      2   2 │   import "@xterm/xterm/css/xterm.css";
      3     │ - import·*·as·React·from·"react";
      4   3 │   // We are using these as types.
      5   4 │   import { Terminal } from "@xterm/xterm";
          5 │ + import·*·as·React·from·"react";
      6   6 │   export class XTerm extends React.Component {
      7   7 │     /**
  

./dist/XTerm.d.ts organizeImports ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Import statements could be sorted:
  
      1   1 │   import "@xterm/xterm/css/xterm.css";
      2     │ - import·*·as·React·from·"react";
      3     │ - import·{
          2 │ + import·{
      4   3 │     type IBufferRange,
      5   4 │     type ILinkProvider,
    ······· │ 
      9   8 │     Terminal,
     10   9 │   } from "@xterm/xterm";
         10 │ + import·*·as·React·from·"react";
     11  11 │   export type IEventListener<T, U = void> = (arg1: T, arg2: U) => void;
     12  12 │   export interface XTermProps {
  

./version-compatibility-tests/devtools/eslint-compatibility-report.json format ━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    84 84 │       }
    85 85 │     ]
    86    │ - }
       86 │ + }
       87 │ + 
  

./vite.config.mjs:2:18 lint/style/useNodejsImportProtocol  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × A Node.js builtin module should be imported with the node: protocol.
  
    1 │ import { defineConfig } from "vite";
  > 2 │ import path from "path";
      │                  ^^^^^^
    3 │ import reactRefresh from "@vitejs/plugin-react-refresh";
    4 │ 
  
  i Using the node: protocol is more explicit and signals that the imported module belongs to Node.js.
  
  i Unsafe fix: Add the node: protocol.
  
     1  1 │   import { defineConfig } from "vite";
     2    │ - import·path·from·"path";
        2 │ + import·path·from·"node:path";
     3  3 │   import reactRefresh from "@vitejs/plugin-react-refresh";
     4  4 │   
  

./vite.config.mjs organizeImports ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Import statements could be sorted:
  
     1    │ - import·{·defineConfig·}·from·"vite";
     2    │ - import·path·from·"path";
        1 │ + import·path·from·"path";
     3  2 │   import reactRefresh from "@vitejs/plugin-react-refresh";
        3 │ + import·{·defineConfig·}·from·"vite";
     4  4 │   
     5  5 │   export default defineConfig({
  

./src/XTerm.tsx:291:5 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Prefer for...of instead of forEach.
  
    290 │     // Load addons if the prop exists.
  > 291 │     this.props.addons?.forEach((addon) => {
        │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 292 │       this.terminal.loadAddon(addon);
  > 293 │     });
        │     ^^
    294 │ 
    295 │     // Add Custom Key Event Handler
  
  i forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

./eslint.config.mjs format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    32 │ ··},
       │    +

./dist/XTerm.js format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
     50  50 │       if (this.props.customKeyEventHandler) {
     51  51 │         this.terminal.attachCustomKeyEventHandler(
     52     │ - ········this.props.customKeyEventHandler
         52 │ + ········this.props.customKeyEventHandler,
     53  53 │         );
     54  54 │       }
    ······· │ 
     56  56 │       if (this.props.customWheelEventHandler) {
     57  57 │         this.terminal.attachCustomWheelEventHandler(
     58     │ - ········this.props.customWheelEventHandler
         58 │ + ········this.props.customWheelEventHandler,
     59  59 │         );
     60  60 │       }
  

./e2e/xterm-react-strict.jsx format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
     7  7 │     useEffect(() => {
     8  8 │       xTermRef.current?.terminal.writeln(
     9    │ - ······"Hello·from·\x1B[1;3;31mxterm-react\x1B[0m·in·React.StrictMode"
        9 │ + ······"Hello·from·\x1B[1;3;31mxterm-react\x1B[0m·in·React.StrictMode",
    10 10 │       );
    11 11 │       xTermRef.current?.terminal.write("$ ");
    ····· │ 
    62 62 │       <React.StrictMode>
    63 63 │         <App />
    64    │ - ····</React.StrictMode>
       64 │ + ····</React.StrictMode>,
    65 65 │     );
    66 66 │   } else {
  

./src/XTerm.tsx format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    296 296 │       if (this.props.customKeyEventHandler) {
    297 297 │         this.terminal.attachCustomKeyEventHandler(
    298     │ - ········this.props.customKeyEventHandler
        298 │ + ········this.props.customKeyEventHandler,
    299 299 │         );
    300 300 │       }
    ······· │ 
    303 303 │       if (this.props.customWheelEventHandler) {
    304 304 │         this.terminal.attachCustomWheelEventHandler(
    305     │ - ········this.props.customWheelEventHandler
        305 │ + ········this.props.customWheelEventHandler,
    306 306 │         );
    307 307 │       }
  

./version-compatibility-tests/core/react-versions-test.js:67:43 lint/style/useTemplate  FIXABLE  ━━━━━━━━━━

  × Template literals are preferred over string concatenation.
  
    65 │       const stdout = err.stdout ? err.stdout.toString() : "";
    66 │       const stderr = err.stderr ? err.stderr.toString() : "";
  > 67 │       const combined = stdout + (stderr ? "\n" + stderr : "");
       │                                           ^^^^^^^^^^^^^
    68 │       if (logPath) {
    69 │         fs.mkdirSync(path.dirname(logPath), { recursive: true });
  
  i Unsafe fix: Use a template literal.
  
     65  65 │         const stdout = err.stdout ? err.stdout.toString() : "";
     66  66 │         const stderr = err.stderr ? err.stderr.toString() : "";
     67     │ - ······const·combined·=·stdout·+·(stderr·?·"\n"·+·stderr·:·"");
         67 │ + ······const·combined·=·stdout·+·(stderr·?·`\n${stderr}`·:·"");
     68  68 │         if (logPath) {
     69  69 │           fs.mkdirSync(path.dirname(logPath), { recursive: true });
  

./version-compatibility-tests/core/react-versions-test.js:147:19 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    146 │       // Test TypeScript compilation
  > 147 │       console.log(`   Testing TypeScript compilation...`);
        │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    148 │       this.execWithLog(
    149 │         "pnpm run build",
  
  i Unsafe fix: Replace with string literal
  
    145 145 │   
    146 146 │         // Test TypeScript compilation
    147     │ - ······console.log(`···Testing·TypeScript·compilation...`);
        147 │ + ······console.log("···Testing·TypeScript·compilation...");
    148 148 │         this.execWithLog(
    149 149 │           "pnpm run build",
  

./version-compatibility-tests/core/react-versions-test.js:155:19 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━

  × Do not use template literals if interpolation and special-character handling are not needed.
  
    154 │       // Test if e2e example still works
  > 155 │       console.log(`   Testing e2e compatibility...`);
        │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    156 │       const buildResult = await this.testE2EBuild();
    157 │ 
  
  i Unsafe fix: Replace with string literal
  
    153 153 │   
    154 154 │         // Test if e2e example still works
    155     │ - ······console.log(`···Testing·e2e·compatibility...`);
        155 │ + ······console.log("···Testing·e2e·compatibility...");
    156 156 │         const buildResult = await this.testE2EBuild();
    157 157 │   
  

check ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while running checks.
  

