
> @pablo-lion/xterm-react@1.2.0 biome:check /Users/pablo/LocalDocs/repo/PabloLION/xterm-react
> biome check . "--" "--max-diagnostics=5"

The number of diagnostics exceeds the limit allowed. Use --max-diagnostics to increase it.
Diagnostics not shown: 6332.
Checked 24 files in 12s. No fixes applied.
Found 3236 errors.
Found 2902 warnings.
 ELIFECYCLE  Command failed with exit code 1.

biome.json:18:14 deserialize ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i The configuration schema version does not match the CLI version 2.2.4
  
    16 │     }
    17 │   },
  > 18 │   "$schema": "https://biomejs.dev/schemas/2.0.0/schema.json"
       │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    19 │ }
  
  i   Expected:                     2.2.4
      Found:                        2.0.0
  
  
  i Run the command biome migrate to migrate the configuration file.
  

version-compatibility-tests/core/react-versions-test.js:67:43 lint/style/useTemplate  FIXABLE  ━━━━━━━━━━

  i Template literals are preferred over string concatenation.
  
    65 │       const stdout = err.stdout ? err.stdout.toString() : "";
    66 │       const stderr = err.stderr ? err.stderr.toString() : "";
  > 67 │       const combined = stdout + (stderr ? "\n" + stderr : "");
       │                                           ^^^^^^^^^^^^^
    68 │       if (logPath) {
    69 │         fs.mkdirSync(path.dirname(logPath), { recursive: true });
  
  i Unsafe fix: Use a template literal.
  
     65  65 │         const stdout = err.stdout ? err.stdout.toString() : "";
     66  66 │         const stderr = err.stderr ? err.stderr.toString() : "";
     67     │ - ······const·combined·=·stdout·+·(stderr·?·"\n"·+·stderr·:·"");
         67 │ + ······const·combined·=·stdout·+·(stderr·?·`\n${stderr}`·:·"");
     68  68 │         if (logPath) {
     69  69 │           fs.mkdirSync(path.dirname(logPath), { recursive: true });
  

version-compatibility-tests/version-test-runner.js:8:30 lint/style/useNodejsImportProtocol  FIXABLE  ━━━━━━━━━━

  i A Node.js builtin module should be imported with the node: protocol.
  
     6 │  */
     7 │ 
   > 8 │ const { execSync } = require("child_process");
       │                              ^^^^^^^^^^^^^^^
     9 │ const fs = require("fs");
    10 │ const path = require("path");
  
  i Using the node: protocol is more explicit and signals that the imported module belongs to Node.js.
  
  i Unsafe fix: Add the node: protocol.
  
      6   6 │    */
      7   7 │   
      8     │ - const·{·execSync·}·=·require("child_process");
          8 │ + const·{·execSync·}·=·require("node:child_process");
      9   9 │   const fs = require("fs");
     10  10 │   const path = require("path");
  

version-compatibility-tests/version-test-runner.js:9:20 lint/style/useNodejsImportProtocol  FIXABLE  ━━━━━━━━━━

  i A Node.js builtin module should be imported with the node: protocol.
  
     8 │ const { execSync } = require("child_process");
   > 9 │ const fs = require("fs");
       │                    ^^^^
    10 │ const path = require("path");
    11 │ 
  
  i Using the node: protocol is more explicit and signals that the imported module belongs to Node.js.
  
  i Unsafe fix: Add the node: protocol.
  
      7   7 │   
      8   8 │   const { execSync } = require("child_process");
      9     │ - const·fs·=·require("fs");
          9 │ + const·fs·=·require("node:fs");
     10  10 │   const path = require("path");
     11  11 │   
  

version-compatibility-tests/version-test-runner.js:10:22 lint/style/useNodejsImportProtocol  FIXABLE  ━━━━━━━━━━

  i A Node.js builtin module should be imported with the node: protocol.
  
     8 │ const { execSync } = require("child_process");
     9 │ const fs = require("fs");
  > 10 │ const path = require("path");
       │                      ^^^^^^
    11 │ 
    12 │ // Define major versions to test for each dependency
  
  i Using the node: protocol is more explicit and signals that the imported module belongs to Node.js.
  
  i Unsafe fix: Add the node: protocol.
  
      8   8 │   const { execSync } = require("child_process");
      9   9 │   const fs = require("fs");
     10     │ - const·path·=·require("path");
         10 │ + const·path·=·require("node:path");
     11  11 │   
     12  12 │   // Define major versions to test for each dependency
  

vite.config.mjs:2:18 lint/style/useNodejsImportProtocol  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A Node.js builtin module should be imported with the node: protocol.
  
    1 │ import { defineConfig } from "vite";
  > 2 │ import path from "path";
      │                  ^^^^^^
    3 │ import reactRefresh from "@vitejs/plugin-react-refresh";
    4 │ 
  
  i Using the node: protocol is more explicit and signals that the imported module belongs to Node.js.
  
  i Unsafe fix: Add the node: protocol.
  
     1  1 │   import { defineConfig } from "vite";
     2    │ - import·path·from·"path";
        2 │ + import·path·from·"node:path";
     3  3 │   import reactRefresh from "@vitejs/plugin-react-refresh";
     4  4 │   
  

e2e-build/assets/index-DhzMnp0v.css:135:14 lint/complexity/noImportantStyles  FIXABLE  ━━━━━━━━━━━━━

  ! Avoid the use of the !important style.
  
    133 │ }
    134 │ .xterm-dim {
  > 135 │   opacity: 1 !important;
        │              ^^^^^^^^^^
    136 │ }
    137 │ .xterm-underline-1 {
  
  i This style reverses the cascade logic, and precedence is reversed. This could lead to having styles with higher specificity being overridden by styles with lower specificity.
  
  i Unsafe fix: Remove the style.
  
    135 │ ··opacity:·1·!important;
        │             ----------- 

version-compatibility-tests/core/react-versions-test.js:209:16 lint/correctness/noUnusedVariables  FIXABLE  ━━━━━━━━━━

  ! This variable error is unused.
  
    207 │         this.execWithLog(restoreCmd, {}, `restore-install.log`);
    208 │         console.log("✅ Original dependencies restored");
  > 209 │       } catch (error) {
        │                ^^^^^
    210 │         console.error("!�  Warning: Failed to restore original dependencies");
    211 │       }
  
  i Unused variables are often the result of an incomplete refactoring, typos, or other sources of bugs.
  
  i Unsafe fix: If this is intentional, prepend error with an underscore.
  
    207 207 │           this.execWithLog(restoreCmd, {}, `restore-install.log`);
    208 208 │           console.log("✅ Original dependencies restored");
    209     │ - ······}·catch·(error)·{
        209 │ + ······}·catch·(_error)·{
    210 210 │           console.error("!�  Warning: Failed to restore original dependencies");
    211 211 │         }
  

version-compatibility-tests/version-test-runner.js:10:7 lint/correctness/noUnusedVariables  FIXABLE  ━━━━━━━━━━

  ! This variable path is unused.
  
     8 │ const { execSync } = require("child_process");
     9 │ const fs = require("fs");
  > 10 │ const path = require("path");
       │       ^^^^
    11 │ 
    12 │ // Define major versions to test for each dependency
  
  i Unused variables are often the result of an incomplete refactoring, typos, or other sources of bugs.
  
  i Unsafe fix: If this is intentional, prepend path with an underscore.
  
      8   8 │   const { execSync } = require("child_process");
      9   9 │   const fs = require("fs");
     10     │ - const·path·=·require("path");
         10 │ + const·_path·=·require("path");
     11  11 │   
     12  12 │   // Define major versions to test for each dependency
  

version-compatibility-tests/version-test-runner.js:233:16 lint/correctness/noUnusedVariables  FIXABLE  ━━━━━━━━━━

  ! This variable error is unused.
  
    231 │           stdio: "pipe",
    232 │         });
  > 233 │       } catch (error) {
        │                ^^^^^
    234 │         console.error("Warning: Failed to restore original dependencies");
    235 │       }
  
  i Unused variables are often the result of an incomplete refactoring, typos, or other sources of bugs.
  
  i Unsafe fix: If this is intentional, prepend error with an underscore.
  
    231 231 │             stdio: "pipe",
    232 232 │           });
    233     │ - ······}·catch·(error)·{
        233 │ + ······}·catch·(_error)·{
    234 234 │           console.error("Warning: Failed to restore original dependencies");
    235 235 │         }
  

/Users/pablo/LocalDocs/repo/PabloLION/xterm-react/--max-diagnostics=5 internalError/io  INTERNAL  ━━━━━━━━━━

  × No such file or directory (os error 2)
  
  ! This diagnostic was derived from an internal Biome error. Potential bug, please report it if necessary.
  

biome.json format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    17 17 │     },
    18 18 │     "$schema": "https://biomejs.dev/schemas/2.0.0/schema.json"
    19    │ - }
       19 │ + }
       20 │ + 
  

dist/XTerm.js:1:1 assist/source/organizeImports  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The imports and exports are not sorted.
  
  > 1 │ import { jsx as _jsx } from "react/jsx-runtime";
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    2 │ import "@xterm/xterm/css/xterm.css";
    3 │ import * as React from "react";
  
  i Safe fix: Organize Imports (Biome)
  
      1   1 │   import { jsx as _jsx } from "react/jsx-runtime";
      2   2 │   import "@xterm/xterm/css/xterm.css";
      3     │ - import·*·as·React·from·"react";
      4     │ - //·We·are·using·these·as·types.
      5     │ - import·{·Terminal·}·from·"@xterm/xterm";
          3 │ + //·We·are·using·these·as·types.
          4 │ + import·{·Terminal·}·from·"@xterm/xterm";
          5 │ + import·*·as·React·from·"react";
      6   6 │   export class XTerm extends React.Component {
      7   7 │     /**
  

e2e/xterm-react-strict.jsx format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
     7  7 │     useEffect(() => {
     8  8 │       xTermRef.current?.terminal.writeln(
     9    │ - ······"Hello·from·\x1B[1;3;31mxterm-react\x1B[0m·in·React.StrictMode"
        9 │ + ······"Hello·from·\x1B[1;3;31mxterm-react\x1B[0m·in·React.StrictMode",
    10 10 │       );
    11 11 │       xTermRef.current?.terminal.write("$ ");
    ····· │ 
    62 62 │       <React.StrictMode>
    63 63 │         <App />
    64    │ - ····</React.StrictMode>
       64 │ + ····</React.StrictMode>,
    65 65 │     );
    66 66 │   } else {
  

e2e/xterm-react.jsx format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    9 │ ······"Hello·from·\x1B[1;3;31mxterm-react\x1B[0m",
      │                                                  +

eslint.config.mjs:1:1 assist/source/organizeImports  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The imports and exports are not sorted.
  
  > 1 │ import eslintConfigPrettier from "eslint-config-prettier";
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    2 │ import eslintPluginPrettierRecommended from "eslint-plugin-prettier/recommended";
    3 │ import jsLint from "@eslint/js";
  
  i Safe fix: Organize Imports (Biome)
  
     1    │ - import·eslintConfigPrettier·from·"eslint-config-prettier";
     2    │ - import·eslintPluginPrettierRecommended·from·"eslint-plugin-prettier/recommended";
     3    │ - import·jsLint·from·"@eslint/js";
        1 │ + import·jsLint·from·"@eslint/js";
        2 │ + import·eslintConfigPrettier·from·"eslint-config-prettier";
        3 │ + import·eslintPluginPrettierRecommended·from·"eslint-plugin-prettier/recommended";
     4  4 │   import tsLint from "typescript-eslint";
     5  5 │   
  

eslint.config.mjs format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    32 │ ··},
       │    +

package.json format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    79 79 │     },
    80 80 │     "sideEffects": false
    81    │ - }
       81 │ + }
       82 │ + 
  

version-compatibility-tests/devtools/eslint-compatibility-report.json format ━━━━━━━━━━━━━━━━━━━━━━━

  × Formatter would have printed the following content:
  
    84 84 │       }
    85 85 │     ]
    86    │ - }
       86 │ + }
       87 │ + 
  

vite.config.mjs:1:1 assist/source/organizeImports  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The imports and exports are not sorted.
  
  > 1 │ import { defineConfig } from "vite";
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    2 │ import path from "path";
    3 │ import reactRefresh from "@vitejs/plugin-react-refresh";
  
  i Safe fix: Organize Imports (Biome)
  
     1    │ - import·{·defineConfig·}·from·"vite";
        1 │ + import·reactRefresh·from·"@vitejs/plugin-react-refresh";
     2  2 │   import path from "path";
     3    │ - import·reactRefresh·from·"@vitejs/plugin-react-refresh";
        3 │ + import·{·defineConfig·}·from·"vite";
     4  4 │   
     5  5 │   export default defineConfig({
  

check ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while running checks.
  

